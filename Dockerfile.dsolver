FROM phusion/baseimage:0.9.18

# Use baseimage-docker's init system.
CMD ["/sbin/my_init"]

# Add image description and version
ENV IMAGE_DESCRIPTION SRR-DSolver-Base
ENV IMAGE_VERSION 0.1
ENV CUDA_MAJOR_VERSION 7.5
ENV CUDA_MINOR_VERSION 18
ENV BUILD_PACKAGES build-essential lsb-release bzip2
ENV RUNTIME_PACKAGES curl ca-certificates module-init-tools
RUN apt-get update \
	&& apt-get -qqy install --no-install-recommends $BUILD_PACKAGES \
	&& apt-get -qqy install --no-install-recommends $RUNTIME_PACKAGES \
	&& cd /tmp \
	&& curl -s http://developer.download.nvidia.com/compute/cuda/${CUDA_MAJOR_VERSION}/Prod/local_installers/cuda_${CUDA_MAJOR_VERSION}.${CUDA_MINOR_VERSION}_linux.run \
	&& chmod +x cuda_*_linux.run && ./cuda_*_linux.run -extract=`pwd` \
	&& ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \
	&& ./cuda-linux64-rel-*.run -noprompt \
	&& rm -rf *
	&& apt-get remove --purge -y $BUILD_PACKAGES $(apt-mark showauto) && rm -rf /var/lib/apt/lists/*

# Setup CUDA environment
ENV CUDA_ROOT /usr/local/cuda
ENV PATH $CUDA_ROOT/bin:$PATH
ENV LD_LIBRARY_PATH $CUDA_ROOT/lib64:$LD_LIBRARY_PATH
ENV LIBRARY_PATH $LIBRARY_PATH:$CUDA_ROOT/lib64
ENV CPATH $CPATH:$CUDA_ROOT/include

# Setup CONDA
ENV CONDA_DIR /home/user/
RUN apt-get update && apt-get install -y --no-install-recommends \
	ca-certificates \
	curl \
	wget \
	module-init-tools \
	build-essential \
	lsb-release \
	bzip2 \
	libglib2.0-0 \
	libxext6 libsm6 \
	libxrender1 \
	&& rm -rf /var/lib/apt/lists/*
ENV LANG C.UTF-8

# Actually install conda
RUN mkdir -p $CONDA_DIR && \
echo 'export PATH=$CONDA_DIR/bin:$PATH' > /etc/profile.d/conda.sh && \
wget --quiet https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh && \
/bin/bash /Miniconda-latest-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
rm Miniconda-latest-Linux-x86_64.sh && \
$CONDA_DIR/bin/conda update --yes conda
ENV PATH $CONDA_DIR/bin:$PATH
# Install conda packages
RUN conda install --yes \
pip \
&& conda clean -yt

# Set up MPI
# passwordless ssh
RUN ssh-keygen -q -N "" -t rsa -f /root/.ssh/id_rsa && \
cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
ADD ssh_config /root/.ssh/config
RUN chmod 600 /root/.ssh/config && \
chown root:root /root/.ssh/config
# fix the 254 error code
RUN sed -i "/^[^#]*UsePAM/ s/.*/#&/" /etc/ssh/sshd_config
RUN echo "UsePAM no" >> /etc/ssh/sshd_config
RUN echo "Port 2122" >> /etc/ssh/sshd_config
# Install OpenMPI
RUN curl -s http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.1.tar.gz | tar -xz -C /home/user
RUN cd /home/user/openmpi-1.10.1 && ./configure --prefix=/home/user/ && make all install
ENV PATH $PATH:/home/user/.openmpi/bin
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/home/user/.openmpi/lib
EXPOSE 2122
CMD ["/usr/sbin/sshd", "-D"]

# Install Caffe

ADD NVIDIA-Linux-x86_64-340.32.run /tmp/NVIDIA-DRIVER.run
RUN sh /tmp/NVIDIA-DRIVER.run -a -N --ui=none --no-kernel-module
RUN rm /tmp/NVIDIA-DRIVER.run

RUN echo '/usr/local/cuda/lib64' > /etc/ld.so.conf.d/cuda.conf; ldconfig

RUN sudo apt-get install -y git gfortran python-dev python-pip
RUN sudo apt-get install -y libfreetype6-dev libxft-dev
RUN sudo apt-get install -y libprotobuf-dev libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev
# libopenblas-dev
RUN sudo apt-get install -y libatlas-base-dev
RUN sudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler

# install OpenBLAS
RUN git clone git://github.com/xianyi/OpenBLAS.git
RUN cd ./OpenBLAS; make -j8; sudo make install

RUN sudo pip install 'Cython>=0.19.2'
RUN sudo pip install 'h5py>=2.2.0'
RUN sudo pip install 'ipython>=1.1.0'
RUN sudo pip install 'leveldb>=0.191'
RUN sudo pip install 'matplotlib>=1.3.1'
RUN sudo pip install 'networkx>=1.8.1'
RUN sudo pip install 'nose>=1.3.0'
RUN sudo pip install 'numpy>=1.7.1'
RUN sudo pip install 'pandas>=0.12.0'
RUN sudo pip install 'protobuf>=2.5.0'
RUN sudo pip install 'python-gflags>=2.0'
RUN sudo pip install 'scikit-image>=0.9.3'
RUN sudo pip install 'scikit-learn>=0.14.1'
RUN sudo pip install 'scipy>=0.13.2'

RUN sudo apt-get install -y gcc-4.6 g++-4.6 gfortran-4.6
RUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6
RUN sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
RUN sudo update-alternatives --set gcc /usr/bin/gcc-4.6

# install caffe
RUN mkdir /home/user/caffe; cd /home/user/caffe; git clone https://github.com/BVLC/caffe.git
RUN cd /home/user/caffe; cp Makefile.config.example Makefile.config
RUN sed -i "s/BLAS := atlas/BLAS := open/" /home/user/caffe/Makefile.config
RUN sed -i "s/# BLAS_INCLUDE := \/path\/to\/your\/blas/BLAS_INCLUDE := \/opt\/OpenBlas/" /home/user/caffe/Makefile.config
RUN sed -i "s/# BLAS_LIB := \/path\/to\/your\/blas/BLAS_LIB := \/opt\/OpenBlas/" /home/user/caffe/Makefile.config
RUN sed -i "s/PYTHON_INCLUDE := \/usr\/local\/include\/python2.7/PYTHON_INCLUDE := \/usr\/include\/python2.7/" /home/user/caffe/Makefile.config
RUN sed -i "s/\/usr\/lib\/python2.7\/dist-packages\/numpy\/core\/include/\/usr/local/lib/python2.7/dist-packages/numpy/core/include/" /home/user/caffe/Makefile.config
RUN cd /home/user/caffe;make all -j8;make test;

# install pycaffe
RUN export PYTHONPATH=$PYTHONPATH:/home/user/caffe/python
RUN cd /home/user/caffe;make pycaffe

# Set up IB :-)
# !!! Major !!! Prior to running this image, be sure to complete Docker port binding ( e.g. tune Docker configs at all machines, where it's planned to run this image )
# It's *impossible* to be done inside of container, unfortunately

# 1. Set up OFED
#  NB: this directory ( /home/user/OFED ) must be mounted to Docker using -v option
RUN cd /home/user/OFED
RUN tar xzf MLNX_OFED_LINUX-3.1-1.0.3-ubuntu14.04-x86_64.tgz 

RUN echo "deb file:/home/user/MLNX_OFED_LINUX-3.1-1.0.3-ubuntu14.04-x86_64/ ./" > /etc/apt/sources.list.d/mlnx-ofed.list 
RUN wget -qO - http://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | sudo apt-key add -
RUN sudo apt-get update
RUN sudo apt-get install mlnx-ofed-all

# Start opensm
RUN sudo /etc/init.d/opensm start
# 2. Set up nv_peer_mem

RUN sudo modprobe nv_peer_mem

# 3. Specify IB IP addresses
# NB: IP address and netmask are mounted using respective files using -v option
RUN export $MY_IP=$(cat /home/user/MY_IP)
RUN export $MY_MASK=$(cat /home/user/MY_MASK)
RUN ifconfig ib0 $MY_IP netmask $MY_MASK
